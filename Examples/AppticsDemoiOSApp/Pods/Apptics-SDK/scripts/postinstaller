#!/bin/sh

#  syncevents.sh
#  Apptics
#
#  Created by Saravanan S on 04/06/19.
#  Copyright Â© 2019 zoho. All rights reserved.

DIR="$(command dirname -- "${0}")"
source "${DIR}/sdk_info"

projectname="."
projectfilepath=""
SOURCE="proj"
LANG="objc"
PREFIX="AP"
HELP=0

ZA_INFO_FILE_NAME="apptics-config.plist"

ZA_META_FILE_NAME="$(uuidgen)-apptics-meta.json"

#Apple script alert before dSYM upload
function error_prompt() {
osascript <<EOT
tell app "System Events"

button returned of (display alert "$1" message "$2" buttons {"Ok"} default button 1 as critical giving up after 10)

end tell
EOT
}

while [ $# -gt 0 ]; do
case "$1" in
--help)
HELP=1
;;
--use-swift)
LANG="swift"
;;
--prefix=*)
PREFIX="${1#*=}"
;;
--target-name=*)
targetname="${1#*=}"
;;
--target-group=*)
targetgroup="${1#*=}"
;;
--project-name=*)
projectname="${1#*=}"
;;
--project-file-path=*)
projectfilepath="${1#*=}"
;;
--config-file-path=*)
ZA_INFOPLIST_FILE="${1#*=}"
ZA_INFO_FILE_NAME=$(basename "/$ZA_INFOPLIST_FILE")
;;
*)
exit 1
esac
shift
done

if [ $HELP -eq 1 ];then
echo "Options:\n"
echo "    --project-name       Provide the name of the project"
echo "    --target-name        Provide the name of the target"
echo "    --target-group       Provide the name of the target group(folder)"
echo "    --project-file       Provide the path of the xcproject file"
echo "    --prefix             **AppticsExtension.* will be prefixed by this value"
echo "    --use-swift          Generate class for swift"
echo "    --help               Show help banner of specified command"
exit 0
fi

getXcodeproj() {

if [ "$projectfilepath" != "" ]; then
echo $projectfilepath;
else
fileToOpen='';

fileToOpen=$(find "." -maxdepth 2 -name *.xcodeproj | grep "${projectname}")

if [ -n "$fileToOpen" ]
then
echo $fileToOpen;
else
echo nil;
fi
fi

}

if [ ! "$targetname" ]; then
exports="$(xcodebuild -project "$(getXcodeproj)" -showBuildSettings | grep "SRCROOT\|INFOPLIST_FILE\|PODS_ROOT" | sed -e "s/ = /=/g")"
while read -r line; do     export "$line"; done <<< "$exports"

while [ -z "${SRCROOT}" ]
do

echo "SRCROOT : ${SRCROOT}"
echo "Source root is not available, wait for a second"
exports="$(xcodebuild -project "$(getXcodeproj)" -showBuildSettings | grep "SRCROOT\|INFOPLIST_FILE\|PODS_ROOT" | sed -e "s/ = /=/g")"
sleep 1

while read -r line; do     export "$line"; done <<< "$exports"
done;

else

exports="$(xcodebuild -project "$(getXcodeproj)" -target "$targetname" -showBuildSettings | grep "SRCROOT\|INFOPLIST_FILE\|PODS_ROOT" | sed -e "s/ = /=/g")"
while read -r line; do     export "$line"; done <<< "$exports"

while [ -z "${SRCROOT}" ]
do

echo "SRCROOT : ${SRCROOT}"
echo "Source root is not available, wait for a second"
exports="$(xcodebuild -project "$(getXcodeproj)" -target "$targetname" -showBuildSettings | grep "SRCROOT\|INFOPLIST_FILE\|PODS_ROOT" | sed -e "s/ = /=/g")"
sleep 1
while read -r line; do     export "$line"; done <<< "$exports"
done;

fi

echo $INFOPLIST_FILE
if [ -z "${PODS_ROOT}" ]
then
PODS_ROOT="${SRCROOT}/Pods"
fi

if [[ "$INFOPLIST_FILE" == *"$SRCROOT"* ]]; then
AP_INFO_FILE_NAME="$INFOPLIST_FILE"
else
AP_INFO_FILE_NAME="$SRCROOT/$INFOPLIST_FILE"
fi

ZA_INFOPLIST_FILE="$(find "${SRCROOT}" -name "${ZA_INFO_FILE_NAME}" | head -1)"

if [ ! -f "${ZA_INFOPLIST_FILE}" ]; then
  ZA_INFOPLIST_FILE=${SRCROOT}/${ZA_INFO_FILE_NAME}
fi

if [ ! -f "${ZA_INFOPLIST_FILE}" ]; then
  ZA_RESOURCE_DIR=$(command dirname -- "${AP_INFO_FILE_NAME}")
  ZA_INFOPLIST_FILE=${ZA_RESOURCE_DIR}/${ZA_INFO_FILE_NAME}
fi

if [ ! -f "${ZA_INFOPLIST_FILE}" ]; then
value=$(error_prompt "Missing apptics-config.plist" "Please download and add the apptics-config.plist file to your Xcode project root else provide the file path by passing '--config-file-path'")

exit 0
fi

echo ${ZA_INFOPLIST_FILE}

if [ ! "${API_KEY}" ]; then
API_KEY=$(/usr/libexec/PlistBuddy -c 'Print API_KEY' "${ZA_INFOPLIST_FILE}")
fi

if [ ! "${API_KEY}" ]; then

value=$(error_prompt "Missing API_KEY" "Please download and add the apptics-config.plist file your Xcode project.")
fi

#URL_ENDPOINT="https://apptics.zoho.com/api/apptics/v3/event/get"

SERVER_URL=$(/usr/libexec/PlistBuddy -c 'Print SERVER_URL' "${ZA_INFOPLIST_FILE}")

echo "EVENTS_TRACKING_ID : ${EVENTS_TRACKING_ID}"
echo "API_TRACKING_ID : ${API_TRACKING_ID}"

#moduleid 5=events, 6=apis
if [ "${SERVER_URL}" ]; then

params="moduleids"

if [ "${EVENTS_TRACKING_ID}" ]; then
params="${params}=5,"
fi

if [ "${API_TRACKING_ID}" ]; then
params="${params}6,"
fi

URL_ENDPOINT="${SERVER_URL}/sdk/api/apptics/v1/engagement/getinfo?${params}"
else
value=$(error_prompt "Missing SERVER_URL" "Please download and add the apptics-config.plist file your Xcode project.")
exit 0
fi

fetchEventsInfo() {

echo $(rm -v /tmp/"${ZA_META_FILE_NAME}")

if [ $SOURCE == "pods" ];then
echo $(rm -v /tmp/APEventsEnum.*)
else
echo $(rm -v "/tmp/${PREFIX}AppticsExtension.*")
fi

STATUS=$(curl "${URL_ENDPOINT}" -v --write-out %{http_code} --silent -o "/tmp/${ZA_META_FILE_NAME}" -H "zak: ${API_KEY}" -X POST --connect-timeout 60 --max-time 900 --retry 2 --retry-delay 5)
echo "${URL_ENDPOINT}" --write-out %{http_code} --silent -o "/tmp/${ZA_META_FILE_NAME}" -H "zak: ${API_KEY}"

echo "STATUS ${STATUS}"

if [ $STATUS -eq 200 ]; then
echo "Downloaded the data from Apptics"

echo $(ruby -r "$(command dirname -- "${0}")/apptics_event_sync.rb" -e "AppticsModerator.main '$(getXcodeproj)','${targetname}','${targetgroup}','${SRCROOT}','${LANG}','${PREFIX}','${ZA_META_FILE_NAME}'")
echo "AppticsModerator.main '$(getXcodeproj)','${targetname}','${targetgroup}','${SRCROOT}','${LANG}','${PREFIX}','${ZA_META_FILE_NAME}'"

else
echo "$STATUS Error occured ($?)"
exit 1
fi
}

fetchEventsInfo $1
